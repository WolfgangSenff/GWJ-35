[gd_scene load_steps=8 format=2]

[ext_resource path="res://assets/player.png" type="Texture" id=1]
[ext_resource path="res://scenes/Player.gd" type="Script" id=2]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 6, 12 )

[sub_resource type="Shader" id=2]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/teleport-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float progress : hint_range(0.0, 1.0);
uniform float noise_density = 60;
uniform float beam_size : hint_range(0.01, 0.15);
uniform vec4 color : hint_color = vec4(0.0, 1.02, 1.2, 1.0);
uniform vec2 direction;

// We are generating our own noise here. You could experiment with the 
// built in SimplexNoise or your own noise texture for other effects.
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

void fragment()
{
	vec4 tex = texture(TEXTURE, UV);
	
    float l_dir = 0.0;
    if (direction.x == 1.0)
    {
        l_dir = 1.0 - UV.x;
    }
    else if (direction.x == -1.0)
    {
        l_dir = UV.x;
    }
    else if (direction.y == 1.0)
    {
        l_dir = 1.0 - UV.y;
    }
    else if (direction.y == -1.0)
    {
        l_dir = UV.y;
    }
    
	float noise = noise(UV * noise_density) * l_dir;
	
	float d1 = step(progress, noise);
	float d2 = step(progress - beam_size, noise);
	
	vec3 beam = vec3(d2 - d1) * color.rgb;
	
	tex.rgb += beam;
	tex.a *= d2;
	
	COLOR = tex;
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/progress = 0.0
shader_param/noise_density = 0.0
shader_param/beam_size = 0.15
shader_param/color = Color( 0.541176, 0.690196, 0.376471, 1 )
shader_param/direction = Vector2( 1, 0 )

[sub_resource type="Animation" id=4]
resource_name = "Backward"
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:material:shader_param/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.37, 0.39, 0.41, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.467, 1.0, 0.467, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:material:shader_param/color")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0.705882, 0.321569, 0.321569, 1 ) ]
}

[sub_resource type="Animation" id=5]
resource_name = "Forward"
length = 0.6
step = 0.01
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:material:shader_param/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.37, 0.39, 0.41, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.467, 1.0, 0.467, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:material:shader_param/color")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0.541176, 0.690196, 0.376471, 1 ) ]
}

[node name="Player" type="KinematicBody2D"]
collision_layer = 4
collision_mask = 0
script = ExtResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, 1 )
shape = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 3 )
z_index = 1
texture = ExtResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Backward = SubResource( 4 )
anims/Forward = SubResource( 5 )

[node name="CastRight" type="RayCast2D" parent="."]
enabled = true
cast_to = Vector2( 9, 0 )
collision_mask = 917504

[node name="CastDown" type="RayCast2D" parent="."]
enabled = true
cast_to = Vector2( 0, 12 )
collision_mask = 917504

[node name="CastLeft" type="RayCast2D" parent="."]
enabled = true
cast_to = Vector2( -9, 0 )
collision_mask = 917504
